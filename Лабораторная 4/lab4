#1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å {ùêµùëõ} –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏.
set.seed(123)
r = 0.01  #–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞
N = 200  #–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤

#—Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ B_n –∏ –∑–∞–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ B0 = 1
B_sequence = numeric(N)
B_sequence[1] = 1

#—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å B_n
for (n in 2:N) {  
  B_sequence[n] = (1 + r) * B_sequence[n - 1]
}

plot(B_sequence, type = 'l', main = "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å {B_n}")

#2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å {ùëÜùëõ} –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

#—Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ S_n –∏ –∑–∞–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ S0 = 1
S_sequence = numeric(N)
S_sequence[1] = 1

#–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
a = -0.3
b = 0.8
p = 0.4

#–±–µ—Ä–Ω—É–ª–ª–∏–µ–≤—Å–∫–∞—è –°–í
rho = rbinom(N, 1, p)

#rho –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ b, –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ—Ä–Ω—É–ª–ª–∏–µ–≤—Å–∫–æ–π –°–í –ø—Ä–∏–Ω—è–ª–∞ –∑–Ω–∞—á–µ–Ω–∏–µ 1, –∏–Ω–∞—á–µ - –∞
for (i in 1:N) {
  if (rho[i] == 1) 
    rho[i] = b
  else 
    rho[i] = a
}

#—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å S_n
for (n in 2:N) {
  S_sequence[n] = (1 + rho[n]) * S_sequence[n - 1] 
}

plot(S_sequence, type = 'l', main = "–°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å {S_n}")

#3.  –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—É—é —Ü–µ–Ω—É ùëêùëéùëôùëô-–æ–ø—Ü–∏–æ–Ω–∞.
N = 10; S = 100; a = -0.3
b = 0.8; K = 100; r = 0.2

#–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–π —Ü–µ–Ω—ã call-–æ–ø—Ü–∏–æ–Ω–∞
p1 = (r - a) / (b - a)
p2 = ((1 + b) / (1 + r)) * p1
K_0 = 1 + log(K / (S * (1 + a)^N)) * (log((1 + b) / (1 + a)))^(-1)

#–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è B
func_B = function(j, N, p) {
  sum = 0
  for (k in j:N)
    sum = sum + (factorial(N) / (factorial(k) * factorial(N - k))) * p^k * (1 - p)^(N - k)
  sum
}

#—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è —Ü–µ–Ω–∞ call-–æ–ø—Ü–∏–æ–Ω–∞ ( ‚âà 86)
call_option_price = S * func_B(K_0, N, p2) - K * (1 + r)^(-N) * func_B(K_0, N, p1)
call_option_price
